# Generated by Django 3.2.19 on 2023-05-18 08:21

import datetime
from django.db import migrations, models
import django.db.models.deletion
import uuid
import wagtail.blocks
import wagtail.contrib.routable_page.models
import wagtail.documents.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
        ('wagtaildocs', '0012_uploadeddocument'),
        ('wagtailcore', '0083_workflowcontenttype'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActualityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(allow_unicode=True, blank=True, help_text="ce champ est rempli automatiquement s'il est laissé vide", max_length=100, unique=True, verbose_name='Slug')),
                ('name_fr', models.CharField(default='', max_length=100, verbose_name='Nom fr')),
                ('name_en', models.CharField(default='', max_length=100, verbose_name='Nom en')),
                ('name_pt_br', models.CharField(default='', max_length=100, verbose_name='Nom pt-br')),
                ('name_nl', models.CharField(default='', max_length=100, verbose_name='Nom nl')),
            ],
            options={
                'verbose_name': "Type d'actualité",
                'verbose_name_plural': "Types d'actualité",
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=50)),
                ('email', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=50)),
                ('lastname', models.CharField(max_length=50)),
                ('subject', models.CharField(max_length=40)),
                ('message', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ContactPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('left_column', wagtail.fields.RichTextField(verbose_name='colonne de gauche')),
            ],
            options={
                'verbose_name': 'Page de contact',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ContentPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.fields.StreamField([('heading', wagtail.blocks.CharBlock(form_classname='full title', label='Titre de la page')), ('section', wagtail.blocks.StructBlock([('paragraph', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'h3', 'h4', 'ol', 'ul', 'h2'], label='Contenu', required=True)), ('color', wagtail.blocks.ChoiceBlock(choices=[('blue-light', 'Bleue'), ('secondary-light', 'Rose'), ('white', 'Blanche'), ('', 'Sans couleur')], help_text='Couleur de fond', label='couleur', required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(label='Image à côté du paragraphe', required=False)), ('position', wagtail.blocks.ChoiceBlock(choices=[('right', 'Droite'), ('left', 'Gauche')], help_text="Position de l'image", required=False)), ('sub_section', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('color', wagtail.blocks.ChoiceBlock(choices=[('blue-light', 'Bleue'), ('secondary-light', 'Rose'), ('white', 'Blanche'), ('', 'Sans couleur')], help_text='Couleur de fond', label='couleur', required=False)), ('paragraph', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'h3', 'h4', 'ol', 'ul'], label='Contenu', required=False)), ('columns', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('color', wagtail.blocks.ChoiceBlock(choices=[('blue-light', 'Bleue'), ('secondary-light', 'Rose'), ('white', 'Blanche'), ('', 'Sans couleur')], help_text='Couleur de fond', label='couleur', required=False)), ('paragraph', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'h3', 'h4', 'ol', 'ul'], label='Contenu', required=False))], label='Colonne'), label='Colonnes'))], label='Sous section'), default=[], label='Sous sections'))], label='Section')), ('image', wagtail.images.blocks.ImageChooserBlock()), ('pdf', wagtail.documents.blocks.DocumentChooserBlock())], blank=True, help_text='Corps de la page', use_json_field=True, verbose_name='Contenu')),
                ('show_in_footer', models.BooleanField(default=False, help_text='Si un lien vers cette page devra apparaître dans le bas de page', verbose_name='Faire apparaître dans le bas de page')),
            ],
            options={
                'verbose_name': 'Page de contenu',
                'verbose_name_plural': 'Pages de contenu',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='GeoZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=60, verbose_name='Nom')),
                ('code', models.CharField(max_length=20, verbose_name='code (ne pas changer !)')),
                ('latitude', models.FloatField(verbose_name='latitude du centre')),
                ('longitude', models.FloatField(verbose_name='longitude du centre')),
                ('icon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtaildocs.document')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale')),
            ],
            options={
                'verbose_name': 'zone géographique',
                'verbose_name_plural': 'zones géographiques',
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('translation_key', 'locale')},
            },
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('introduction', wagtail.fields.RichTextField(blank=True, null=True, verbose_name='Introduction')),
                ('resources_block_title', models.CharField(blank=True, default='Liste des ressources', max_length=64, verbose_name='Titre du bloc des ressources')),
                ('resources_block_explication', wagtail.fields.RichTextField(blank=True, null=True, verbose_name='Explication du bloc des ressources')),
                ('news_block_title', models.CharField(blank=True, default='Dernières actualités', max_length=64, verbose_name='Titre du bloc des actualités')),
            ],
            options={
                'verbose_name': "Page d'accueil",
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='NewsListPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'Page des actualités',
                'verbose_name_plural': 'Pages des actualités',
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='ResourcesPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'Page des ressources',
                'verbose_name_plural': 'Pages des ressources',
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(allow_unicode=True, blank=True, help_text="ce champ est rempli automatiquement s'il est laissé vide", max_length=100, unique=True, verbose_name='Slug')),
                ('name_fr', models.CharField(default='', max_length=100, verbose_name='Nom fr')),
                ('name_en', models.CharField(default='', max_length=100, verbose_name='Nom en')),
                ('name_pt_br', models.CharField(default='', max_length=100, verbose_name='Nom pt-br')),
                ('name_nl', models.CharField(default='', max_length=100, verbose_name='Nom nl')),
            ],
            options={
                'verbose_name': 'Type de ressource',
                'verbose_name_plural': 'Types de ressource',
            },
        ),
        migrations.CreateModel(
            name='Thematic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(allow_unicode=True, blank=True, help_text="ce champ est rempli automatiquement s'il est laissé vide", max_length=100, unique=True, verbose_name='Slug')),
                ('name_fr', models.CharField(default='', max_length=100, verbose_name='Nom fr')),
                ('name_en', models.CharField(default='', max_length=100, verbose_name='Nom en')),
                ('name_pt_br', models.CharField(default='', max_length=100, verbose_name='Nom pt-br')),
                ('name_nl', models.CharField(default='', max_length=100, verbose_name='Nom nl')),
                ('icon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtaildocs.document')),
            ],
            options={
                'verbose_name': 'Thématique',
                'verbose_name_plural': 'Thématiques',
            },
        ),
        migrations.CreateModel(
            name='StructureSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('linkedin', models.URLField(blank=True, help_text='URL de votre page LinkedIn', null=True)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'verbose_name': 'Paramètre de la structure',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('body', wagtail.fields.StreamField([('heading', wagtail.blocks.CharBlock(form_classname='full title', label='Titre de la page')), ('section', wagtail.blocks.StructBlock([('paragraph', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'h3', 'h4', 'ol', 'ul', 'h2'], label='Contenu', required=True)), ('color', wagtail.blocks.ChoiceBlock(choices=[('blue-light', 'Bleue'), ('secondary-light', 'Rose'), ('white', 'Blanche'), ('', 'Sans couleur')], help_text='Couleur de fond', label='couleur', required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(label='Image à côté du paragraphe', required=False)), ('position', wagtail.blocks.ChoiceBlock(choices=[('right', 'Droite'), ('left', 'Gauche')], help_text="Position de l'image", required=False)), ('sub_section', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('color', wagtail.blocks.ChoiceBlock(choices=[('blue-light', 'Bleue'), ('secondary-light', 'Rose'), ('white', 'Blanche'), ('', 'Sans couleur')], help_text='Couleur de fond', label='couleur', required=False)), ('paragraph', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'h3', 'h4', 'ol', 'ul'], label='Contenu', required=False)), ('columns', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('color', wagtail.blocks.ChoiceBlock(choices=[('blue-light', 'Bleue'), ('secondary-light', 'Rose'), ('white', 'Blanche'), ('', 'Sans couleur')], help_text='Couleur de fond', label='couleur', required=False)), ('paragraph', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'h3', 'h4', 'ol', 'ul'], label='Contenu', required=False))], label='Colonne'), label='Colonnes'))], label='Sous section'), default=[], label='Sous sections'))], label='Section')), ('image', wagtail.images.blocks.ImageChooserBlock()), ('pdf', wagtail.documents.blocks.DocumentChooserBlock())], blank=True, help_text='Corps de la page', use_json_field=True, verbose_name='Contenu')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateField(auto_now=True)),
                ('is_global', models.BooleanField(default=False, verbose_name='Concerne toutes les zones')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('slug', models.SlugField(blank=True, default='', help_text="ce champ est rempli automatiquement s'il est laissé vide", max_length=100, unique=True, verbose_name='Slug (URL de la ressource)')),
                ('geo_dev_creation', models.BooleanField(default=False, verbose_name='Créé par Progysat ?')),
                ('source_name', models.CharField(blank=True, max_length=100, verbose_name='Producteur de la ressource')),
                ('source_link', models.CharField(blank=True, max_length=200, verbose_name='Lien vers la Ressource (URL)')),
                ('file', models.FileField(blank=True, help_text="S'il est défini, le lien vers la source est ignoré", null=True, upload_to='', verbose_name='Fichier source')),
                ('short_description', wagtail.fields.RichTextField(blank=True, max_length=1000, null=True, verbose_name='Description courte')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale')),
                ('main_thematic', models.ForeignKey(blank=True, help_text="ce champ n'est utilisé que lorsque plusieurs thématiques sont sélectionnées", null=True, on_delete=django.db.models.deletion.SET_NULL, to='progysat.thematic', verbose_name='Thématique principale')),
                ('thematics', models.ManyToManyField(blank=True, related_name='ressources', to='progysat.Thematic', verbose_name='Thématiques')),
                ('types', models.ManyToManyField(blank=True, to='progysat.ResourceType')),
                ('zones', models.ManyToManyField(blank=True, to='progysat.GeoZone', verbose_name='Zones')),
            ],
            options={
                'verbose_name': 'Ressource',
                'verbose_name_plural': 'Ressources',
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('translation_key', 'locale')},
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='AnalyticsScriptSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('script', models.TextField(blank=True, help_text="Script d'analytics", null=True)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'verbose_name': 'Script de suivi du traffic',
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('body', wagtail.fields.StreamField([('heading', wagtail.blocks.CharBlock(form_classname='full title', label='Titre de la page')), ('section', wagtail.blocks.StructBlock([('paragraph', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'h3', 'h4', 'ol', 'ul', 'h2'], label='Contenu', required=True)), ('color', wagtail.blocks.ChoiceBlock(choices=[('blue-light', 'Bleue'), ('secondary-light', 'Rose'), ('white', 'Blanche'), ('', 'Sans couleur')], help_text='Couleur de fond', label='couleur', required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(label='Image à côté du paragraphe', required=False)), ('position', wagtail.blocks.ChoiceBlock(choices=[('right', 'Droite'), ('left', 'Gauche')], help_text="Position de l'image", required=False)), ('sub_section', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('color', wagtail.blocks.ChoiceBlock(choices=[('blue-light', 'Bleue'), ('secondary-light', 'Rose'), ('white', 'Blanche'), ('', 'Sans couleur')], help_text='Couleur de fond', label='couleur', required=False)), ('paragraph', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'h3', 'h4', 'ol', 'ul'], label='Contenu', required=False)), ('columns', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('color', wagtail.blocks.ChoiceBlock(choices=[('blue-light', 'Bleue'), ('secondary-light', 'Rose'), ('white', 'Blanche'), ('', 'Sans couleur')], help_text='Couleur de fond', label='couleur', required=False)), ('paragraph', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'h3', 'h4', 'ol', 'ul'], label='Contenu', required=False))], label='Colonne'), label='Colonnes'))], label='Sous section'), default=[], label='Sous sections'))], label='Section')), ('image', wagtail.images.blocks.ImageChooserBlock()), ('pdf', wagtail.documents.blocks.DocumentChooserBlock())], blank=True, help_text='Corps de la page', use_json_field=True, verbose_name='Contenu')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='nom')),
                ('publication_date', models.DateTimeField(default=datetime.datetime.now, help_text="Permet de trier l'ordre d'affichage dans la page des actualités", verbose_name='Date de publication')),
                ('slug', models.SlugField(blank=True, default='', help_text="ce champ est rempli automatiquement s'il est laissé vide", max_length=100, unique=True, verbose_name="Slug (URL de l'actualité)")),
                ('introduction', wagtail.fields.RichTextField(max_length=250)),
                ('is_progysat', models.BooleanField(default=False, help_text="La première actualité mise en avant sur la page d'accueil est la dernière actualité Progysat", verbose_name='Est une nouvelle Progysat')),
                ('is_global', models.BooleanField(default=False, verbose_name='Concerne toutes les zones')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Miniature')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale')),
                ('resources', models.ManyToManyField(blank=True, to='progysat.Resource', verbose_name='Ressources liées')),
                ('thematics', models.ManyToManyField(blank=True, help_text="Ce champ n'est pas encore utilisé", to='progysat.Thematic', verbose_name='Thématiques liées')),
                ('types', models.ManyToManyField(blank=True, help_text='Permet le filtrage des actualités', related_name='news', to='progysat.ActualityType', verbose_name='Type')),
                ('zones', models.ManyToManyField(blank=True, help_text="Ce champ n'est pas encore utilisé", to='progysat.GeoZone', verbose_name='Zones géographique liées')),
            ],
            options={
                'verbose_name': 'Actualité',
                'verbose_name_plural': 'Actualités',
                'ordering': ['-publication_date'],
                'abstract': False,
                'unique_together': {('translation_key', 'locale')},
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
    ]
